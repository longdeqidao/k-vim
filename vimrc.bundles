call plug#begin('~/.vim/plugged')


Plug 'gmarik/vundle'


Plug 'Valloric/YouCompleteMe', { 'on': [] }
    let g:ycm_show_diagnostics_ui = 0
    let g:ycm_key_list_select_completion = ['<Down>']
    let g:ycm_key_list_previous_completion = ['<Up>']
    let g:ycm_seed_identifiers_with_syntax=1
    let g:ycm_goto_buffer_command = 'vertical-split'

    nnoremap <leader>d :YcmCompleter GoToDefinitionElseDeclaration<CR>
    nnoremap <leader>f :YcmCompleter GoToDeclaration<CR>

    if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
        let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
    endif
    if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
        let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
    endif

augroup load_us_ycm
  autocmd!
  autocmd InsertEnter * call plug#load('YouCompleteMe')
                     \| autocmd! load_us_ycm
augroup END

Plug 'jiangmiao/auto-pairs'
    let g:AutoPairsMultilineClose = 0


Plug 'scrooloose/nerdcommenter'
    let g:NERDSpaceDelims=1

" Plug 'tpope/vim-surround'


Plug 'tpope/vim-repeat'


Plug 'bronson/vim-trailing-whitespace'


Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_smartcase = 1
    map <leader>h <Plug>(easymotion-linebackward)
    map <leader>j <Plug>(easymotion-j)
    map <leader>k <Plug>(easymotion-k)
    map <leader>l <Plug>(easymotion-lineforward)
    map <leader>. <Plug>(easymotion-repeat)
    map <Leader>f <Plug>(easymotion-bd-f)
    nmap <Leader>f <Plug>(easymotion-overwin-f)
    nmap <leader>g <Plug>(easymotion-overwin-f2)


Plug 'kshenoy/vim-signature'


Plug 'luochen1990/rainbow'
    let g:rainbow_active = 1


Plug 'scrooloose/nerdtree'
    map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
    map <Leader>n <plug>NERDTreeTabsToggle<CR>
    let g:nerdtree_tabs_synchronize_view=0
    let g:nerdtree_tabs_synchronize_focus=0
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0


Plug 'jistr/vim-nerdtree-tabs'
    map <Leader>n <plug>NERDTreeTabsToggle<CR>
    let g:nerdtree_tabs_synchronize_view=0
    let g:nerdtree_tabs_synchronize_focus=0


Plug 'majutsushi/tagbar'
    let g:tagbar_autofocus = 1


Plug 'thinca/vim-quickrun'
    let g:quickrun_config = {
    \   "_" : {
    \       "outputter" : "message",
    \   },
    \}
    let g:quickrun_no_default_key_mappings = 1
    nmap <Leader>r <Plug>(quickrun)


Plug 'fatih/vim-go'
    let g:go_template_autocreate = 0
    let g:go_highlight_types = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_interfaces = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1
    let g:go_autodetect_gopath = 1
    let g:go_fmt_command = "goimports"
    let g:go_fmt_fail_silently = 1


Plug 'unblevable/quick-scope'
    let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']


" Plug 'wlangstroth/vim-racket'


" Plug 'mechatroner/rainbow_csv'


" Plug 'cespare/vim-toml'

call plug#end()
